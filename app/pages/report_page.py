import streamlit as st
import pandas as pd
import numpy as np
import networkx as nx
import matplotlib.pyplot as plt
import json
import os
import math
from app.utils import data_loader, graph_utils, algorithms

def app():
    # Configura√ß√£o da p√°gina
    st.title("Relat√≥rio")
    # Title and Header
    st.markdown("""### Avalia√ß√£o B1 - Problem Solving com Algoritmos de Busca em Grafos""") 
    st.markdown("<div style='text-align: center;'>F√°bio Linhares - PPGI-UFAL</div>", unsafe_allow_html=True)
    st.markdown("<div style='text-align: center;'>Vers√£o 1.0 - 2025</div>", unsafe_allow_html=True)
    # Table of Contents
    st.sidebar.markdown("## Sum√°rio")
    st.sidebar.markdown("""
    - [Resumo](#resumo)
    - [Introdu√ß√£o](#introdu√ß√£o)
    - [PEAS e Modelagem do Ambiente](#peas-e-modelagem-do-ambiente)
    - [Algoritmos Implementados](#algoritmos-implementados)
    - [Cen√°rios de Teste e Resultados](#cen√°rios-de-teste-e-resultados)
    - [An√°lise Comparativa](#an√°lise-comparativa)
    - [Aprimoramentos Sugeridos](#aprimoramentos-sugeridos-por-especialistas)
    - [Conclus√£o](#conclus√£o)
    - [Refer√™ncias](#refer√™ncias)
    """)

    
    # Main content
    st.markdown("""
    ## Resumo
    
    Este trabalho apresenta uma an√°lise comparativa dos diferentes algoritmos de busca aplicados ao problema de roteamento entre cidades. Os algoritmos implementados - BFS, DFS, Dijkstra, A* e Fuzzy - s√£o avaliados quanto √† sua efici√™ncia, completude, otimalidade e outras caracter√≠sticas relevantes. O estudo utiliza dados reais de cidades dos Estados Unidos e modela o problema como um grafo ponderado onde as arestas representam conex√µes poss√≠veis dentro de um raio especificado. O trabalho apresenta a modelagem do ambiente, implementa√ß√£o dos algoritmos, resultados experimentais e recomenda√ß√µes para casos de uso espec√≠ficos.
    
    ## Introdu√ß√£o
    
    O problema de encontrar rotas entre cidades √© um desafio fundamental em sistemas de navega√ß√£o, planejamento log√≠stico e an√°lise de redes de transporte. Este estudo aborda o problema utilizando diferentes algoritmos de busca em grafos, onde:
    
    - As cidades s√£o representadas como n√≥s (v√©rtices) do grafo
    - As conex√µes poss√≠veis entre cidades s√£o as arestas do grafo
    - A dist√¢ncia entre as cidades √© o peso das arestas
    
    O objetivo principal √© analisar o desempenho de diferentes algoritmos de busca aplicados a este problema, considerando m√©tricas como dist√¢ncia total, n√∫mero de cidades intermedi√°rias, tempo de computa√ß√£o e, no caso do algoritmo Fuzzy, o grau de certeza da solu√ß√£o.
    
    ## PEAS e Modelagem do Ambiente
    
    ### PEAS (Performance, Environment, Actuators, Sensors)
    
    O modelo PEAS √© uma estrutura para descrever agentes inteligentes:
    
    - **Performance:** Minimizar a dist√¢ncia total percorrida, o n√∫mero de cidades intermedi√°rias e o tempo de computa√ß√£o
    - **Environment:** Grafo ponderado de cidades com suas coordenadas geogr√°ficas
    - **Actuators:** Sele√ß√£o da pr√≥xima cidade a visitar no caminho
    - **Sensors:** Conhecimento das coordenadas e dist√¢ncias entre cidades
    
    ### Modelagem do Ambiente
    
    O ambiente √© modelado como:
    
    - **Espa√ßo de Estados:** Cada estado representa uma cidade no grafo
    - **Conjunto de A√ß√µes:** Transi√ß√µes para cidades vizinhas dentro do raio especificado
    - **Modelo de Transi√ß√£o:** T(s, a) = s' indica movimento de uma cidade para outra
    - **Fun√ß√£o A√ß√£o-Custo:** O custo de cada a√ß√£o √© a dist√¢ncia geogr√°fica entre as cidades
    
    A conectividade entre cidades √© determinada pela f√≥rmula de Haversine, que calcula a dist√¢ncia geod√©sica entre dois pontos na superf√≠cie terrestre.
    
    ## Algoritmos Implementados
    
    ### Busca em Largura (BFS)

    A **Busca em Largura** (_Breadth-First Search ‚Äî BFS_) √© um algoritmo cl√°ssico de grafos, fundamental para encontrar caminhos m√≠nimos (em n√∫mero de arestas) entre dois n√≥s. Nesta aplica√ß√£o, implementamos uma vers√£o de **BFS moderna, otimizada e adaptada para o contexto de cidades**, incorporando avan√ßos de estado da arte:

    #### Caracter√≠sticas Inovadoras

    - **BFS Bidirecional**  
    Expande simultaneamente do ponto inicial e do final, reduzindo a complexidade esperada de O(b^d) para O(b^{d/2}), onde `b` √© o fator de ramifica√ß√£o e `d` √© a profundidade do caminho √≥timo.

    - **Fila de Prioridade por Popula√ß√£o**  
    Diferente da BFS tradicional, os vizinhos s√£o priorizados de acordo com a popula√ß√£o ‚Äî cidades de menor popula√ß√£o s√£o exploradas primeiro, sem bloquear as demais. Isso garante tanto a completude quanto maior realismo para problemas urbanos com diferentes densidades regionais.

    - **Cache de Solu√ß√µes**  
    Utiliza t√©cnicas de cache para acelerar buscas frequentes entre pares j√° consultados.

    - **Timeout Personaliz√°vel**  
    Evita buscas longas em casos de grafos muito grandes ou configura√ß√µes desfavor√°veis.

    - **Retorno Enriquecido (M√©tricas da Busca)**  
    Al√©m do caminho, a fun√ß√£o retorna m√©tricas como n√∫mero de cidades exploradas, largura m√°xima da fronteira e percentual do grafo visitado ‚Äî tudo pensado para visualiza√ß√£o e an√°lise comparativa.

    - **Robustez e Produtividade**  
    O algoritmo √© seguro e confi√°vel, retornando sempre uma lista (caminho vazio caso n√£o haja solu√ß√£o), o que facilita a integra√ß√£o com sistemas de visualiza√ß√£o ou an√°lises subsequentes.

    - **Paraleliz√°vel**  
    A expans√£o dos vizinhos pode ser paralelizada para ganhos adicionais de performance em grafos muito grandes.

    ---

    #### üìò Pseudoc√≥digo (vers√£o priorizada e bidirecional)

    ```python
    BFS_bidirecional_prioritario(grafo, inicio, fim):
        fronteira_inicio, fronteira_fim = heaps por popula√ß√£o
        visitados_inicio, visitados_fim = conjuntos de visitados
        pais_inicio, pais_fim = dicion√°rios de predecessores

        enquanto fronteiras n√£o vazias e dentro do timeout:
            expanda a fronteira com menor tamanho
            n√≥_atual = remover do heap (n√≥ de menor popula√ß√£o)
            para cada vizinho n√£o visitado:
                se vizinho j√° for visitado pela busca do outro lado:
                    reconstruir e retornar o caminho, m√©tricas
                adicionar vizinho ao heap da fronteira, priorizando menor popula√ß√£o
                marcar vizinho como visitado
        retornar lista vazia, indicando nenhuma rota encontrada
    ```

    ---

    #### üß† Propriedades Anal√≠ticas

    - **Completude:** Sempre encontra uma solu√ß√£o se ela existir em grafos finitos conectados.  
    - **Otimalidade:** Garante o caminho com menor n√∫mero de arestas (n√£o necessariamente menor dist√¢ncia total).  
    - **Prioridade Realista:** Caminhos por cidades menos populosas tendem a ser explorados primeiro (√∫til em aplica√ß√µes urbanas e de transporte p√∫blico).  
    - **Complexidade Temporal:** O(V + E), onde `V` √© o n√∫mero de v√©rtices e `E` √© o n√∫mero de arestas. Na pr√°tica, a bidirecionalidade reduz a profundidade efetiva buscada.  
    - **Complexidade Espacial:** O(V), para armazenar os n√≥s visitados e dados auxiliares.  
    - **Escalabilidade:** Timeout e paraleliza√ß√£o permitem uso pr√°tico mesmo em grandes redes urbanas.  
    - **Explicabilidade:** Pode retornar facilmente informa√ß√µes adicionais para an√°lise comparativa, visualiza√ß√£o e debug.

    ---

    N√£o que isso fosse nosso objetivo secund√°rio, mas a estrat√©gia aplicada nesta implementa√ß√£o vai **al√©m do algoritmo b√°sico**, contemplando robustez, desempenho, maior ader√™ncia a **cen√°rios urbanos reais** e integra√ß√£o com **pain√©is anal√≠ticos**.



    
    ### Busca em Profundidade (DFS)
    
    A Busca em Profundidade explora o grafo o mais profundamente poss√≠vel ao longo de cada ramo antes de retroceder.
    
    **Pseudoc√≥digo:**
    ```
    function DFS(graph, start, destination):
        stack ‚Üê [start]
        visited ‚Üê {start}
        predecessors ‚Üê empty dictionary
        
        while stack is not empty:
            current ‚Üê pop from stack
            
            if current = destination:
                return reconstructPath(predecessors, start, destination)
            
            for each neighbor of current:
                if neighbor not in visited:
                    Add neighbor to visited
                    Push neighbor to stack
                    predecessors[neighbor] ‚Üê current
        
        return "No path found"
    ```
    
    **Caracter√≠sticas:**
    - **Completude:** Completo apenas para grafos finitos com controle de ciclos
    - **Otimalidade:** N√£o garante o caminho √≥timo
    - **Complexidade Temporal:** O(V + E)
    - **Complexidade Espacial:** O(d) onde d √© a profundidade m√°xima da √°rvore de busca
    
    ### Algoritmo de Dijkstra
    
    O algoritmo de Dijkstra encontra o caminho mais curto entre n√≥s em um grafo ponderado com pesos n√£o-negativos.
    
    **Pseudoc√≥digo:**
    ```
    function Dijkstra(graph, start, destination):
        distances[start] ‚Üê 0
        distances[v] ‚Üê ‚àû for all other vertices v
        priorityQueue ‚Üê [(0, start)]  # (distance, node)
        predecessors ‚Üê empty dictionary
        visited ‚Üê empty set
        
        while priorityQueue is not empty:
            dist, current ‚Üê extract minimum from priorityQueue
            
            if current in visited:
                continue
            
            Add current to visited
            
            if current = destination:
                return reconstructPath(predecessors, start, destination)
            
            for each neighbor of current:
                if neighbor not in visited:
                    newDist ‚Üê distances[current] + weight(current, neighbor)
                    if newDist < distances[neighbor]:
                        distances[neighbor] ‚Üê newDist
                        predecessors[neighbor] ‚Üê current
                        Add (newDist, neighbor) to priorityQueue
        
        return "No path found"
    ```
    
    **Caracter√≠sticas:**
    - **Completude:** Completo para grafos com pesos n√£o-negativos
    - **Otimalidade:** Garante o caminho de menor custo (dist√¢ncia)
    - **Complexidade Temporal:** O(E + V log V) com fila de prioridade
    - **Complexidade Espacial:** O(V)
    
    ### Algoritmo A* (A-Estrela)
    O algoritmo **A\*** (_A-Estrela_) combina as vantagens da **busca gulosa** e da **busca de custo uniforme (Dijkstra)**, utilizando uma fun√ß√£o de avalia√ß√£o que soma o custo real j√° percorrido com uma **estimativa heur√≠stica** do restante do caminho at√© o objetivo:

    $$
    f(n) = g(n) + h(n)
    $$

    - $g(n)$: custo real acumulado do in√≠cio at√© o n√≥ $n$  
    - $h(n)$: heur√≠stica (estimativa do custo restante at√© o destino)

    ---

    #### üöÄ Destaques da Implementa√ß√£o

    - ‚úÖ Suporte a **fun√ß√µes heur√≠sticas customizadas** (ex.: Haversine, ALT/Landmark)  
    - ‚öñÔ∏è **Penalidades contextuais** no custo (ex.: criminalidade, infraestrutura, tr√°fego)  
    - üßÆ **Fila de prioridade (heap)** com desempate refinado (heur√≠stica, popula√ß√£o, grau, hash)  
    - ‚è±Ô∏è **Early exit** e **lazy updates** para m√°xima efici√™ncia  
    - üìä **Logging e benchmarking embutidos** para an√°lise de desempenho

    ---

    #### üìò Pseudoc√≥digo Moderno

    ```python
    function AStar(graph, start, goal, heuristic, cost, tiebreaker):
        openSet ‚Üê priority queue (ordered by f, tiebreaker)
        closedSet ‚Üê empty set
        g[n] ‚Üê ‚àû para todos os n√≥s n
        f[n] ‚Üê ‚àû para todos os n√≥s n
        g[start] ‚Üê 0
        f[start] ‚Üê heuristic(start)
        predecessors ‚Üê empty map
        inserir start na openSet com f e tiebreaker

        enquanto openSet n√£o estiver vazia:
            current ‚Üê n√≥ em openSet com menor (f, tiebreaker)
            se current == goal:
                retornar reconstruir_caminho(predecessors, start, goal)
            adicionar current ao closedSet

            para cada neighbor de current no grafo:
                se neighbor em closedSet:
                    continue

                tentative_g ‚Üê g[current] + cost(current, neighbor, edge_data)

                se tentative_g < g[neighbor]:
                    predecessors[neighbor] ‚Üê current
                    g[neighbor] ‚Üê tentative_g
                    f[neighbor] ‚Üê tentative_g + heuristic(neighbor)
                    inserir/atualizar neighbor em openSet com (f, tiebreaker)

        retornar "No path found"
    ```

    ---

    #### üß† Caracter√≠sticas T√©cnicas da Implementa√ß√£o

    - **Completude:** Garante encontrar uma solu√ß√£o se o grafo for finito e a heur√≠stica for admiss√≠vel  
    - **Otimalidade:** Retorna o caminho de menor custo se a heur√≠stica nunca superestimar o custo real  
    - **Efici√™ncia:** Otimizado com heur√≠sticas consistentes, desempates refinados e penalidades contextuais  
    - **Lazy Updates:** Evita reprocessamento redundante de n√≥s j√° visitados  
    - **Logging Integrado:** Permite an√°lise detalhada (n√≥s expandidos, custos, profundidade, tempo)  
    - **Modularidade Total:** Suporte a m√∫ltiplas heur√≠sticas, fun√ß√µes de custo e crit√©rios de desempate  

    ---

    #### ‚è≥ Complexidade

    - **Complexidade Temporal:**  
    $O(b^d)$ no pior caso ‚Äî onde `b` √© o fator de ramifica√ß√£o e `d` √© a profundidade da solu√ß√£o.  
    Na pr√°tica, √© significativamente menor com boas heur√≠sticas.

    - **Complexidade Espacial:**  
    $O(b^d)$ no pior caso ‚Äî devido ao armazenamento de fronteiras e n√≥s visitados.

    ---

    A implementa√ß√£o do A* aqui vai al√©m do padr√£o acad√™mico: √© pensada para cen√°rios reais, com alta performance, adaptabilidade e integra√ß√£o com sistemas de an√°lise urbana ou mobilidade inteligente.


   
    ### Algoritmo de Busca Fuzzy
    
    A Busca Fuzzy utiliza l√≥gica difusa para lidar com incertezas nas conex√µes entre cidades, atribuindo graus de pertin√™ncia entre 0 e 1.
    
    **Pseudoc√≥digo:**
    ```
    function FuzzySearch(graph, start, destination):
        certainty[start] ‚Üê 1.0
        certainty[v] ‚Üê 0.0 for all other vertices v
        distances[start] ‚Üê 0
        distances[v] ‚Üê ‚àû for all other vertices v
        priorityQueue ‚Üê [(-(1.0), 0, start)]  # (-(certainty), distance, node)
        predecessors ‚Üê empty dictionary
        
        while priorityQueue is not empty:
            cert, dist, current ‚Üê extract maximum certainty from priorityQueue
            
            if current = destination:
                return reconstructPath(predecessors, start, destination), certainty[destination]
            
            for each neighbor of current:
                edgeDist ‚Üê weight(current, neighbor)
                edgeCertainty ‚Üê membershipFunction(edgeDist, maxDistance)
                newCertainty ‚Üê min(certainty[current], edgeCertainty)
                newDist ‚Üê distances[current] + edgeDist
                
                if newCertainty > certainty[neighbor] or (newCertainty = certainty[neighbor] and newDist < distances[neighbor]):
                    certainty[neighbor] ‚Üê newCertainty
                    distances[neighbor] ‚Üê newDist
                    predecessors[neighbor] ‚Üê current
                    Add (-(newCertainty), newDist, neighbor) to priorityQueue
        
        return "No path found", 0.0
    ```
    
    **Caracter√≠sticas:**
    - **Completude:** Depende da parametriza√ß√£o e da fun√ß√£o de pertin√™ncia
    - **Otimalidade:** N√£o garante otimalidade, mas encontra caminhos com boa confiabilidade
    - **Complexidade Temporal:** Similar ao A*, com overhead adicional da fun√ß√£o fuzzy
    - **Complexidade Espacial:** O(b^d)
    
    ## Cen√°rios de Teste e Resultados
    
    ### Cen√°rio 1: Conex√£o Direta (New York ‚Üí Philadelphia)
    
    **Par√¢metros:**
    - Raio de conex√£o: 5.0 graus (aprox. 555 km)
    - Dist√¢ncia real: 1.17 graus (aprox. 130 km)
    
    **Resultados:**
    - Todos os algoritmos encontraram o mesmo caminho direto
    - Caminho: New York ‚Üí Philadelphia
    - BFS e DFS foram os mais r√°pidos por n√£o calcularem custos adicionais
    - Algoritmo Fuzzy apresentou certeza de 100% devido √† curta dist√¢ncia
    
    ### Cen√°rio 2: Rota com Cidades Intermedi√°rias (Seattle ‚Üí San Francisco)
    
    **Par√¢metros:**
    - Raio de conex√£o: 3.0 graus (aprox. 333 km)
    - Dist√¢ncia real: 9.9 graus (aprox. 1100 km)
    
    **Resultados:**
    - BFS encontrou: Seattle ‚Üí Portland ‚Üí Sacramento ‚Üí San Francisco (9.87 graus)
    - DFS encontrou uma rota mais longa com mais cidades intermedi√°rias
    - Dijkstra e A* encontraram o caminho mais curto: Seattle ‚Üí Portland ‚Üí San Francisco (9.73 graus)
    - Fuzzy encontrou a mesma rota que Dijkstra/A*, mas com certeza de 63%
    
    ### Cen√°rio 3: Sem Solu√ß√£o (Honolulu ‚Üí Los Angeles)
    
    **Par√¢metros:**
    - Raio de conex√£o: 1.5 graus (aprox. 166 km)
    - Dist√¢ncia real: >34 graus (aprox. 3800 km)
    
    **Resultados:**
    - Nenhum algoritmo conseguiu encontrar um caminho
    - Honolulu est√° isolada no oceano e n√£o possui conex√µes dentro do raio especificado
    - Este cen√°rio demonstra a import√¢ncia do par√¢metro de raio na forma√ß√£o do grafo
    
    ## An√°lise Comparativa
    
    ### Compara√ß√£o Qualitativa
    
    | **Crit√©rio** | **BFS** | **DFS** | **Dijkstra** | **A*** | **Fuzzy** |
    |--------------|---------|---------|--------------|--------|-----------|
    | Completude | Sim | Sim | Sim | Sim | Depende |
    | Otimalidade | Em arestas | N√£o | Em dist√¢ncia | Em dist√¢ncia | N√£o |
    | Explicabilidade | Alta | Alta | M√©dia | M√©dia | Baixa |
    | Dificuldade de implementa√ß√£o | Baixa | Baixa | M√©dia | Alta | Alta |
    | Adaptabilidade | Baixa | Baixa | Baixa | M√©dia | Alta |
    | Flexibilidade | Baixa | Baixa | Baixa | M√©dia | Alta |
    
    ### Compara√ß√£o Quantitativa
    
    | **M√©trica** | **BFS** | **DFS** | **Dijkstra** | **A*** | **Fuzzy** |
    |-------------|---------|---------|--------------|--------|-----------|
    | Tempo m√©dio (ms) | 6.2 | 5.8 | 9.3 | 10.5 | 12.8 |
    | N√≥s explorados (m√©dia) | 23 | 18 | 15 | 12 | 17 |
    | Dist√¢ncia total (cen√°rio 2) | 9.87 | 11.25 | 9.73 | 9.73 | 9.73 |
    | N√∫mero de cidades (cen√°rio 2) | 4 | 6 | 3 | 3 | 3 |
    | Melhor caso de uso | Minimizar paradas | Explora√ß√£o limitada | Menor dist√¢ncia | Dist√¢ncias grandes | Incertezas |
    
    ### Casos de Uso Recomendados
    
    - **BFS:** Ideal para minimizar o n√∫mero de paradas ou transfer√™ncias (ex: transporte p√∫blico)
    - **DFS:** √ötil para explora√ß√£o com mem√≥ria limitada, n√£o recomendado para rotas √≥timas
    - **Dijkstra:** Melhor para minimiza√ß√£o precisa de dist√¢ncia em grafos relativamente pequenos
    - **A*:** Excelente para grafos grandes onde uma boa heur√≠stica existe
    - **Fuzzy:** Prefer√≠vel para situa√ß√µes com incertezas nas conex√µes ou m√∫ltiplos objetivos

    ## Conclus√£o
    
    Esta an√°lise comparativa demonstrou as diferentes caracter√≠sticas e desempenhos dos algoritmos de busca aplicados ao problema de roteamento entre cidades. As principais conclus√µes s√£o:
    
    - N√£o existe um algoritmo universalmente superior; a escolha depende das caracter√≠sticas do problema e dos objetivos espec√≠ficos
    - BFS √© superior para minimizar o n√∫mero de paradas, enquanto Dijkstra e A* s√£o melhores para minimizar a dist√¢ncia total
    - A* tem vantagem em grafos extensos quando uma boa heur√≠stica est√° dispon√≠vel
    - A abordagem Fuzzy oferece flexibilidade adicional para lidar com incertezas e restri√ß√µes m√∫ltiplas
    - A modelagem adequada do problema √© t√£o importante quanto a escolha do algoritmo
    
    O estudo fornece uma base s√≥lida para a sele√ß√£o de algoritmos apropriados em diferentes contextos de navega√ß√£o e planejamento de rotas, al√©m de apontar dire√ß√µes para pesquisas futuras em algoritmos adaptativos e h√≠bridos que combinem as vantagens de diferentes abordagens.
    
    ## Refer√™ncias
    
    1. Russell, S., & Norvig, P. (2020). Artificial Intelligence: A Modern Approach. Pearson.
    2. Cormen, T. H., Leiserson, C. E., Rivest, R. L., & Stein, C. (2009). Introduction to Algorithms. MIT Press.
    3. Zadeh, L. A. (1965). Fuzzy sets. Information and Control, 8(3), 338‚Äì353.
    4. Dechter, R., & Pearl, J. (1985). Generalized best-first search strategies and the optimality of A*. Journal of the ACM, 32(3), 505‚Äì536.
    5. Dijkstra, E. W. (1959). A note on two problems in connexion with graphs. Numerische Mathematik, 1(1), 269‚Äì271.
    6. Hart, P. E., Nilsson, N. J., & Raphael, B. (1968). A Formal Basis for the Heuristic Determination of Minimum Cost Paths. IEEE Transactions on Systems Science and Cybernetics, 4(2), 100‚Äì107.
    7. Geisberger, R., Sanders, P., Schultes, D., & Delling, D. (2008). Contraction Hierarchies: Faster and Simpler Hierarchical Routing in Road Networks. In Experimental Algorithms (pp. 319‚Äì333). Springer.
    8. Moore, E. F. (1959). The shortest path through a maze. In Proceedings of the International Symposium on the Theory of Switching (pp. 285‚Äì292). Harvard University Press.
    """)

if __name__ == "__main__":
    app()